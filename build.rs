use std::process::Command;
use std::env;
use std::fs;

// Version information
const APP_NAME: &str = "LoVA";
const APP_NAME_FULL: &str = "LocalVisualAudio";
const APP_VERSION: &str = "0.1.0.1";
const APP_AUTHOR: &str = "NAIIVE";
const APP_DESCRIPTION: &str = "Media Downloader";
const APP_NAME_LOWER: &str = "lova";

fn main() {
    println!("cargo:rerun-if-changed=res/resources.rc");
    
    println!("cargo:rustc-env=APP_NAME={}", APP_NAME);
    println!("cargo:rustc-env=APP_NAME_FULL={}", APP_NAME_FULL);
    println!("cargo:rustc-env=APP_VERSION={}", APP_VERSION);
    println!("cargo:rustc-env=APP_AUTHOR={}", APP_AUTHOR);
    println!("cargo:rustc-env=APP_DESCRIPTION={}", APP_DESCRIPTION);
    println!("cargo:rustc-env=APP_NAME_LOWER={}", APP_NAME_LOWER);

    // Create version.rs
    let version_rs = format!(r#"// Generated by build.rs
pub const APP_NAME: &str = "{}";
pub const APP_NAME_FULL: &str = "{}";
pub const APP_VERSION: &str = "{}";
pub const APP_AUTHOR: &str = "{}";
pub const APP_DESCRIPTION: &str = "{}";
pub const APP_NAME_LOWER: &str = "{}";"#,
        APP_NAME, APP_NAME_FULL, APP_VERSION, APP_AUTHOR, APP_DESCRIPTION, APP_NAME_LOWER
    );

    let out_dir = env::var("OUT_DIR").expect("Failed to get OUT_DIR");
    fs::write(format!("{}/version.rs", out_dir), version_rs)
        .expect("Failed to write version.rs");

    let version_parts: Vec<&str> = APP_VERSION.split('.').collect();
    let (v1, v2, v3, v4) = match version_parts.as_slice() {
        [a, b, c, d] => (*a, *b, *c, *d),
        _ => ("0", "0", "0", "0"),
    };

    // Create resources.rc
    let rc_content = format!(r#"id ICON "icon.ico"
1 VERSIONINFO
FILEVERSION {v1},{v2},{v3},{v4}
PRODUCTVERSION {v1},{v2},{v3},{v4}
FILEFLAGSMASK 0x3fL
FILEFLAGS 0x0L
FILEOS 0x40004L
FILETYPE 0x1L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "{APP_AUTHOR}\0"
            VALUE "FileDescription", "{APP_DESCRIPTION}\0"
            VALUE "FileVersion", "{APP_VERSION}\0"
            VALUE "InternalName", "{APP_NAME_FULL}\0"
            VALUE "LegalCopyright", "Copyright (C) 2025 {APP_AUTHOR}\0"
            VALUE "LegalTrademarks", "{APP_AUTHOR}\0"
            VALUE "OriginalFilename", "{APP_NAME}\0"
            VALUE "ProductName", "{APP_NAME}\0"
            VALUE "ProductVersion", "{APP_VERSION}\0"
            VALUE "Comments", "no Comments\0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1200
    END
END"#);

    fs::write("res/resources.rc", rc_content).expect("Failed to write resources.rc");

    let status = Command::new("windres")
        .args(&["res/resources.rc", "-O", "coff", "-o"])
        .arg(format!("{}/resources.res", out_dir))
        .status()
        .expect("Failed to run windres");
    
    if !status.success() {
        panic!("windres failed");
    }
    
    println!("cargo:rustc-link-arg-bins={}/resources.res", out_dir);
}